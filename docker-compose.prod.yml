version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: meu-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-secure_password}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME:-meu_production}
    command: mongod --config /etc/mongod.conf
    networks:
      - meu-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: meu-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app/backend:ro
      - ./docker/execution:/app/docker/execution:ro
      - ./projects:/app/projects
      - backend_logs:/app/backend/logs
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/${MONGO_DB_NAME:-meu_production}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_BASE_URL=${DEEPSEEK_BASE_URL:-https://api.deepseek.com}
      - JWT_SECRET=${JWT_SECRET}
      - HOST_PROJECT_ROOT=${HOST_PROJECT_ROOT}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - meu-network
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: meu-frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./:/app:ro
      - frontend_logs:/app/logs
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - meu-network
    healthcheck:
      test: curl -f http://localhost:3001 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: meu-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - meu-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  meu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16